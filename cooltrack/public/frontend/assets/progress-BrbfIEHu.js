var M=Object.defineProperty,V=Object.defineProperties;var A=Object.getOwnPropertyDescriptors;var v=Object.getOwnPropertySymbols;var $=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable;var N=(e,r,a)=>r in e?M(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a,i=(e,r)=>{for(var a in r||(r={}))$.call(r,a)&&N(e,a,r[a]);if(v)for(var a of v(r))b.call(r,a)&&N(e,a,r[a]);return e},d=(e,r)=>V(e,A(r));var p=(e,r)=>{var a={};for(var s in e)$.call(e,s)&&r.indexOf(s)<0&&(a[s]=e[s]);if(e!=null&&v)for(var s of v(e))r.indexOf(s)<0&&b.call(e,s)&&(a[s]=e[s]);return a};import{r as c,j as f,f as S,k as E,z as w,C as D,a4 as L,H as z,aj as O,I as T,J as G}from"./index-X4KS0kgS.js";var g="Progress",x=100,[k,re]=S(g),[F,H]=k(g),R=c.forwardRef((e,r)=>{const P=e,{__scopeProgress:a,value:s=null,max:o,getValueLabel:l=J}=P,u=p(P,["__scopeProgress","value","max","getValueLabel"]);(o||o===0)&&!y(o)&&console.error(U(`${o}`,"Progress"));const t=y(o)?o:x;s!==null&&!I(s,t)&&console.error(X(`${s}`,"Progress"));const n=I(s,t)?s:null,C=m(n)?l(n,t):void 0;return f.jsx(F,{scope:a,value:n,max:t,children:f.jsx(E.div,d(i({"aria-valuemax":t,"aria-valuemin":0,"aria-valuenow":m(n)?n:void 0,"aria-valuetext":C,role:"progressbar","data-state":j(n,t),"data-value":n!=null?n:void 0,"data-max":t},u),{ref:r}))})});R.displayName=g;var h="ProgressIndicator",_=c.forwardRef((e,r)=>{var u;const l=e,{__scopeProgress:a}=l,s=p(l,["__scopeProgress"]),o=H(h,a);return f.jsx(E.div,d(i({"data-state":j(o.value,o.max),"data-value":(u=o.value)!=null?u:void 0,"data-max":o.max},s),{ref:r}))});_.displayName=h;function J(e,r){return`${Math.round(e/r*100)}%`}function j(e,r){return e==null?"indeterminate":e===r?"complete":"loading"}function m(e){return typeof e=="number"}function y(e){return m(e)&&!isNaN(e)&&e>0}function I(e,r){return m(e)&&!isNaN(e)&&e<=r&&e>=0}function U(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${x}\`.`}function X(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${x} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var q=R,B=_;const K=["1","2","3"],Q=["classic","surface","soft"],W=d(i(i(i({size:{type:"enum",className:"rt-r-size",values:K,default:"2",responsive:!0},variant:{type:"enum",className:"rt-variant",values:Q,default:"surface"}},L),D),w),{duration:{type:"string"}}),Y=c.forwardRef((e,r)=>{const n=z(e,W,G),{className:a,style:s,color:o,radius:l,duration:u}=n,t=p(n,["className","style","color","radius","duration"]);return c.createElement(q,d(i({"data-accent-color":o,"data-radius":l,ref:r,className:T("rt-ProgressRoot",a),style:O({"--progress-duration":"value"in t?void 0:u,"--progress-value":"value"in t?t.value:void 0,"--progress-max":"max"in t?t.max:void 0},s)},t),{asChild:!1}),c.createElement(B,{className:"rt-ProgressIndicator"}))});Y.displayName="Progress";export{Y as s};
